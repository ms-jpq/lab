---
# TODO: wait for v5 to be fixed
# m4_include([layers/v2fly/usr/local/opt/v2fly/vars.m4.yml])
_:
  s: &s-PROTOCOL

  s-shadowsocks: &s-shadowsocks
    network: &tu tcp,udp
    method: &ss-method aes-256-gcm
    password: &password m4_esyscmd(./libexec/uuidgen.py m5_assert([ENV_V2R_SEED]))

  s-trojan: &s-trojan
    clients:
      - password: *password

  s-vmess: &s-vmess
    clients:
      - id: *password

  x-sniff:
    sniffing: &joe
      enabled: true

  _:
    _:
      c-shadowsocks:
        # m4_define([c-shadowsocks], [
        #
        servers:
          - method: *ss-method
            password: *password
            port: 443
            address: $1
        # ])

      c-trojan:
        # m4_define([c-trojan], [
        #
        servers:
          - password: *password
            port: 443
            address: $1
        # ])

      c-vmess:
        # m4_define([c-vmess], [
        #
        vnext:
          - users:
              - id: *password
            port: 443
            address: $1
        # ])

server:
  log:
    loglevel: info
  api: &ctl
    tag: &api api
    services:
      - StatsService
      - ObservatoryService
  stats: {}
  policy: &policy
    system:
      statsInboundDownlink: true
      statsInboundUplink: true
      statsOutboundDownlink: true
      statsOutboundUplink: true
  observatory: &obs
    subjectSelector: &ldrs
      - &ldr ldr-
    probeURL: http://m5_assert([ENV_V2R_DOMAIN])/204

  routing:
    rules:
      - type: &tf field
        outboundTag: *api
        inboundTag:
          - *api
      - type: *tf
        outboundTag: &die blocked
        ip:
          - geoip:private

  outbounds:
    - protocol: freedom
    - protocol: blackhole
      tag: *die

  inbounds:
    - &api-door
      tag: *api
      protocol: dokodemo-door
      port: 30000
      settings:
        address: localhost

    # m4_pushdef([PORT], PORT_BEGIN)
    # m5_for([PROTOCOL], [
    # m5_for([TRANSPORT], [
    # m4_pushdef([TRANS], [m4_regexp(TRANSPORT, [\(^[^@]+\)], [\1])])
    - listen: 127.0.0.53
      port: "PORT"
      protocol: PROTOCOL
      settings:
        <<: *s-PROTOCOL
      sniffing: *joe
      streamSettings:
        network: TRANS
    # m4_pushdef([PORT], m4_incr(PORT))
    # ], TRANSPORTS)
    # ], PROTOCOLS)

client:
  log:
    loglevel: info
  api: *ctl
  stats: {}
  policy: *policy
  observatory: *obs

  routing:
    balancers:
      - tag: *ldr
        selector: *ldrs
        strategy:
          type: random

    rules:
      - type: *tf
        outboundTag: *api
        inboundTag:
          - *api
      - type: *tf
        outboundTag: &local passthrough
        ip:
          - geoip:private
          - geoip:cn
      - type: *tf
        outboundTag: *local
        domains:
          - geosite:cn
      - type: *tf
        balancerTag: *ldr
        inboundTag:
          - &stdin-dokodemo-door dokodemo-door
          - &stdin-socks socks
          - &stdin-http http

  inbounds:
    - *api-door

    - tag: *stdin-dokodemo-door
      protocol: dokodemo-door
      port: 30001
      settings:
        network: *tu
        followRedirect: true
      sniffing: *joe

    - tag: *stdin-socks
      protocol: socks
      port: 30002
      settings:
        udp: true
        auth: noauth
      sniffing: *joe

    - tag: *stdin-http
      protocol: http
      port: 30003
      sniffing: *joe

  outbounds:
    - protocol: freedom
      tag: *local

    # m4_pushdef([PORT], PORT_BEGIN)
    # m5_for([PROTOCOL], [
    # m5_for([TRANSPORT], [
    # m4_pushdef([TRANS], [m4_regexp(TRANSPORT, [\(^[^@]+\)], [\1])])
    # m4_pushdef([XPORT], [m4_regexp(TRANSPORT, [\([^@]+$\)], [\1])])
    # m4_pushdef([SALTED], m4_substr(m4_esyscmd(b2sum --length 64 <<<'PROTOCOL-TRANS-ENV_V2R_SEED'), 0, 16))
    # m4_pushdef([ADDR], SALTED.m5_assert([ENV_V2R_DOMAIN]))
    - tag: ldr-PROTOCOL-TRANS
      protocol: PROTOCOL
      settings:
        # m4_indir(c-PROTOCOL,ADDR)
      streamSettings:
        network: TRANS
        # m4_ifelse(XPORT, [tcp], [
        security: tls
        tlsSettings:
          allowInsecure: true
          serverName: ADDR
      mux:
        enabled: true
        # ])
    # m4_pushdef([PORT], m4_incr(PORT))
    # ], TRANSPORTS)
    # ], PROTOCOLS)
