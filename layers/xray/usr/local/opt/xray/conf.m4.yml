---
# m4_include([layers/xray/usr/local/opt/xray/vars.m4.yml])
_:
  a: &stub-addr 127.0.0.53
  l: &lo localhost
  s: &s-PROTOCOL
  x: &xhttp /xhttp
  w: &ws /ws

  s-vmess: &s-vmess
    clients:
      - id: &password m4_esyscmd(./libexec/uuidgen.py m5_assert([ENV_XRAY_SEED]))

  s-vless: &s-vless
    decryption: none
    clients:
      - id: *password

  s-trojan: &s-trojan
    clients:
      - password: *password

  _:
    _:
      c-vmess:
        # m4_define([c-vmess], [
        #
        vnext:
          - users:
              - id: *password
            port: $2
            address: $1
        # ])

      c-vless:
        # m4_define([c-vless], [
        #
        vnext:
          - users:
              - encryption: none
                id: *password
            port: $2
            address: $1
        # ])

      c-trojan:
        # m4_define([c-trojan], [
        #
        servers:
          - password: *password
            port: $2
            address: $1
        # ])

server:
  log:
    loglevel: error
  api: &ctl
    tag: &api api
    listen: 127.0.0.53:29999
    services:
      - StatsService
  stats: {}
  policy: &policy
    system:
      statsInboundDownlink: true
      statsInboundUplink: true
      statsOutboundDownlink: true
      statsOutboundUplink: true

  routing:
    domainStrategy: &ip-routing IPIfNonMatch
    rules:
      - &api-rule
        type: &tf field
        outboundTag: *api
        inboundTag:
          - *api
      - type: *tf
        outboundTag: &die blocked
        ip:
          - geoip:private
      - type: *tf
        outboundTag: &local passthrough
        network: &tu tcp,udp

  outbounds:
    - tag: *local
      protocol: freedom
    - &hole
      tag: *die
      protocol: blackhole

  inbounds:
    # m5_for([PROTOCOL], [
    # m5_for([TRANSPORT], [
    # m4_pushdef([TRANS], [m4_regexp(TRANSPORT, [\(^[^@]+\)], [\1])])
    - listen: /run/local/xray/PROTOCOL+TRANSPORT.sock,0666
      protocol: PROTOCOL
      settings:
        <<: *s-PROTOCOL
      streamSettings:
        sockopt:
          tcpNoDelay: true
        network: TRANS
        xhttpSettings:
          path: *xhttp
        wsSettings:
          path: *ws
    # ], TRANSPORTS)
    # ], PROTOCOLS)

client:
  log:
    loglevel: error
  api:
    <<: *ctl
    listen: 127.0.0.1:39999
  stats: {}
  policy: *policy
  observatory:
    subjectSelector: &ldrs
      - &ldr ldr-
    probeURL: http://m5_assert([ENV_XRAY_DOMAIN])/204

  routing:
    domainStrategy: *ip-routing
    balancers:
      - tag: *ldr
        selector: *ldrs

    rules:
      - *api-rule
      - type: *tf
        outboundTag: *local
        ip:
          - geoip:private
          - geoip:cn
      - type: *tf
        outboundTag: *local
        domains:
          - geosite:geolocation-cn
          - domain:m5_assert([ENV_XRAY_DOMAIN])

          # m5_for([DOMAIN], [
          - DOMAIN
          # ], m5_assert([ENV_XRAY_LOCAL_DOMAINS]))

      - type: *tf
        balancerTag: *ldr
        domains:
          - geosite:geolocation-!cn
          - domain:ca

          - geosite:bing
          - geosite:google
      - type: *tf
        balancerTag: *ldr
        network: *tu

  inbounds:
    # - tag: *dns
    #   protocol: dokodemo-door
    #   listen: 127.0.0.1
    #   port: 52
    #   sniffing: &sniff
    #     enabled: true
    #     destOverride:
    #       - fakedns
    #       - http
    #       - quic
    #       - tls
    #   settings:
    #     network: *tu
    #     address: 127.0.0.53
    #     port: 2053

    # - &capture
    #   protocol: dokodemo-door
    #   port: 8888
    #   sniffing: *sniff
    #   settings:
    #     network: *tu
    #     followRedirect: true

    # - <<: *capture
    #   port: 8889
    #   streamSettings:
    #     sockopt:
    #       tproxy: tproxy

    - protocol: socks
      port: 50001
      settings:
        udp: true
        auth: noauth

    - protocol: http
      port: 50002

  outbounds:
    - tag: *local
      protocol: freedom
      streamSettings:
        sockopt: &mark
          mark: 0x69

    # - tag: *dns
    #   protocol: *dns
    #   streamSettings:
    #     sockopt: *mark

    - *hole

    # m5_for([PROTOCOL], [
    # m5_for([TRANSPORT], [
    # m4_pushdef([TRANS], [m4_regexp(TRANSPORT, [\(^[^@]+\)], [\1])])
    # m4_pushdef([XPORT], [m4_regexp(TRANSPORT, [\([^@]+$\)], [\1])])
    # m4_pushdef([SALTED], m4_substr(m4_esyscmd(b3sum --no-names --length 8 <<<'PROTOCOL-TRANS-ENV_XRAY_SEED'), 0, 16))
    # m4_pushdef([ADDR], SALTED.x.m5_assert([ENV_XRAY_DOMAIN]))
    - tag: ldr-PROTOCOL-TRANS
      protocol: PROTOCOL
      settings:
        # m4_indir(c-PROTOCOL,ADDR,443)
      streamSettings:
        sockopt: *mark
        network: TRANS
        xhttpSettings:
          path: *xhttp
        wsSettings:
          path: *ws
        security: tls
        tlsSettings:
          allowInsecure: true
      # mux:
      #   enabled: true
    # ], TRANSPORTS)
    # ], PROTOCOLS)
