[[Unit]]
Description       = Qemu -- %N

BindsTo           = 1-vb@v\x2d%i.service
After             = 1-vb@v\x2d%i.service

BindsTo           = dnsmasq@v\x2d%i.service
After             = dnsmasq@v\x2d%i.service

Requires          = 2-fs-alloc-qemu@%i.service
After             = 2-fs-alloc-qemu@%i.service

# m4_ifelse(m5_argn(1, m5_assert([ENV_MACVLAN_IFS])), [], [], [
BindsTo           = 1-mv@m\x2d%i.service
After             = 1-mv@m\x2d%i.service
# ])

[[Service]]
Restart           = on-failure
ProtectSystem     = strict
ProtectHome       = tmpfs
RuntimeDirectory  = local/qemu/%I
ReadWritePaths    = %t %T %S/local %C/local
BindReadOnlyPaths = -%h/.ssh:%h/.ssh
BindReadOnlyPaths = /usr/local/opt/qemu/etc:%E/qemu
PrivateTmp        = yes

EnvironmentFile   = -/usr/local/etc/default/%I.qemu.env
Environment       = MACHINE=%i
Environment       = FS=%S/local/qemu
Environment       = ROOT=%S/local/qemu/%I

Environment       = CPU=
Environment       = MEMORY=8G
Environment       = QMP=%t/local/qemu/%I/qmp.sock
Environment       = MONITOR=%t/local/qemu/%I/mon.sock
Environment       = CONSOLE=%t/local/qemu/%I/con.sock
Environment       = BRIDGE=v-%I
Environment       = KERNEL=%C/local/qemu/vmlinuz
Environment       = INITRD=%C/local/qemu/initrd

Environment       = MACVTAP=m4_ifelse(m5_argn(1, m5_assert([ENV_MACVLAN_IFS])), [], [], [m-%I])

Environment       = DRIVE=%S/local/qemu/%I/fs.raw
Environment       = DEV_HDA=/dev/vda1
Environment       = CLOUD_INIT=%V/cloud-init.iso

Environment       = RAW=%C/local/qemu/cloudimg.raw


ExecStartPre      = /usr/local/opt/qemu/libexec/systemd-pmspawn@.sh ${ROOT} ${DRIVE} ${RAW}
ExecStartPre      = /usr/local/opt/qemu/libexec/cloud-init.sh %I ${CLOUD_INIT}

ExecStartPre      = touch -- "${ROOT}/.#fs.lck"
ExecStopPost      = rm -v -rf -- "${ROOT}/.#fs.lck"

ExecStart         = /usr/local/opt/qemu/bin/%J.sh m4_ifelse(m5_argn(1, m5_assert([ENV_MACVLAN_IFS])), [], [], [--macvtap ${MACVTAP}]) \
                      --cpu ${CPU} \
                      --mem ${MEMORY} \
                      --qmp ${QMP} \
                      --monitor ${MONITOR} \
                      --console ${CONSOLE} \
                      --bridge ${BRIDGE} \
                      --kernel ${KERNEL} \
                      --initrd ${INITRD} \
                      --drive ${DRIVE} \
                      --root ${DEV_HDA} \
                      --drive ${CLOUD_INIT} \
                      $ARGV

ExecReload        = /usr/local/bin/vmctl.sh monitor %I system_reset
ExecStop          = /usr/local/bin/vmctl.sh monitor %I system_powerdown
