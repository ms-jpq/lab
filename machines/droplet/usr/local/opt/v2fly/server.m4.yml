---
log:
  access:
    type: Console
  error:
    type: Console

service:
  stats: {}
  policy:
    system:
      stats:
        inboundDownlink: true
        inboundUplink: true
        outboundDownlink: true
        outboundUplink: true

routing:
  domainStrategy: IpIfNonMatch
  rule:
    - ip: geoip:private
      outboundTag: blocked

outbounds:
  - protocol: freedom
  - protocol: blackhole
    tag: blocked

# m4_define([PORT], [6900])
# m4_define([UUID], m4_esyscmd(./libexec/uuidgen.py m5_assert([ENV_V2R_SEED])))

_:
  _: &x-PROTOCOL

  shadowsocks: &x-shadowsocks
    protocol: shadowsocks
    settings:
      networks: tcp,udp
      method: AES_256_GCM
      password: UUID

  trojan: &x-trojan
    protocol: trojan
    settings:
      users:
        - UUID

  vmess: &x-vmess
    protocol: vmess
    settings:
      users:
        - UUID

# TODO: TRANSPORT->quic
inbounds:
  # m5_for([PROTOCOL], [
  # m5_for([TRANSPORT], [
  - port: "PORT"
    <<: *x-PROTOCOL
    streamSettings:
      transport: TRANSPORT
  # m4_pushdef([PORT], m4_eval(PORT + 1))
  # ], tcp, ws)
  # ], shadowsocks, trojan, vmess)
